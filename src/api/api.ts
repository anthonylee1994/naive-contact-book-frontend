/* tslint:disable */
/* eslint-disable */
/**
 * Naive Contact Book API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface FriendshipsTags
 */
export interface FriendshipsTags {
    /**
     * Tag Value
     * @type {string}
     * @memberof FriendshipsTags
     */
    'value'?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTags
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTags
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface FriendshipsTagsAttributes
 */
export interface FriendshipsTagsAttributes {
    /**
     * Tag ID
     * @type {number}
     * @memberof FriendshipsTagsAttributes
     */
    'id'?: number | null;
    /**
     * Tag Value
     * @type {string}
     * @memberof FriendshipsTagsAttributes
     */
    'value'?: string;
    /**
     * Delete?
     * @type {boolean}
     * @memberof FriendshipsTagsAttributes
     */
    '_destroy'?: boolean | null;
}
/**
 * 
 * @export
 * @interface FriendshipsTarget
 */
export interface FriendshipsTarget {
    /**
     * 
     * @type {number}
     * @memberof FriendshipsTarget
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTarget
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTarget
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTarget
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTarget
     */
    'avatar_url'?: string | null;
    /**
     * 
     * @type {Array<FriendshipsTargetUserContacts>}
     * @memberof FriendshipsTarget
     */
    'user_contacts'?: Array<FriendshipsTargetUserContacts>;
}
/**
 * 
 * @export
 * @interface FriendshipsTargetContact
 */
export interface FriendshipsTargetContact {
    /**
     * Contact ID
     * @type {number}
     * @memberof FriendshipsTargetContact
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetContact
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetContact
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetContact
     */
    'address'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetContact
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetContact
     */
    'updated_at'?: string;
}
/**
 * 
 * @export
 * @interface FriendshipsTargetUserContacts
 */
export interface FriendshipsTargetUserContacts {
    /**
     * User Contact ID
     * @type {number}
     * @memberof FriendshipsTargetUserContacts
     */
    'id'?: number;
    /**
     * Display Order
     * @type {number}
     * @memberof FriendshipsTargetUserContacts
     */
    'display_order'?: number;
    /**
     * Contact Type
     * @type {string}
     * @memberof FriendshipsTargetUserContacts
     */
    'contact_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetUserContacts
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof FriendshipsTargetUserContacts
     */
    'updated_at'?: string;
    /**
     * 
     * @type {FriendshipsTargetContact}
     * @memberof FriendshipsTargetUserContacts
     */
    'contact'?: FriendshipsTargetContact;
}
/**
 * 
 * @export
 * @interface InlineObject
 */
export interface InlineObject {
    /**
     * User Contact
     * @type {Array<UpdateContactsUserContactsAttributes>}
     * @memberof InlineObject
     */
    'user_contacts_attributes': Array<UpdateContactsUserContactsAttributes> | null;
}
/**
 * 
 * @export
 * @interface InlineObject1
 */
export interface InlineObject1 {
    /**
     * Target User ID
     * @type {number}
     * @memberof InlineObject1
     */
    'target_id'?: number;
    /**
     * OTP Code
     * @type {string}
     * @memberof InlineObject1
     */
    '_otp_code'?: string;
    /**
     * 
     * @type {Array<FriendshipsTagsAttributes>}
     * @memberof InlineObject1
     */
    'tags_attributes'?: Array<FriendshipsTagsAttributes>;
}
/**
 * 
 * @export
 * @interface InlineObject2
 */
export interface InlineObject2 {
    /**
     * 
     * @type {Array<FriendshipsTagsAttributes>}
     * @memberof InlineObject2
     */
    'tags_attributes'?: Array<FriendshipsTagsAttributes>;
}
/**
 * 
 * @export
 * @interface InlineResponse200
 */
export interface InlineResponse200 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse200
     */
    'id'?: number;
    /**
     * User ID
     * @type {number}
     * @memberof InlineResponse200
     */
    'user_id'?: number;
    /**
     * Target User ID
     * @type {number}
     * @memberof InlineResponse200
     */
    'target_id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'created_at'?: string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse200
     */
    'updated_at'?: string;
    /**
     * 
     * @type {Array<FriendshipsTags>}
     * @memberof InlineResponse200
     */
    'tags'?: Array<FriendshipsTags>;
    /**
     * 
     * @type {FriendshipsTarget}
     * @memberof InlineResponse200
     */
    'target'?: FriendshipsTarget;
}
/**
 * 
 * @export
 * @interface InlineResponse201
 */
export interface InlineResponse201 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse201
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'created_at': string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'updated_at': string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'avatar_url'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'secret': string;
    /**
     * 
     * @type {string}
     * @memberof InlineResponse201
     */
    'otp_code'?: string;
    /**
     * 
     * @type {Array<FriendshipsTargetUserContacts>}
     * @memberof InlineResponse201
     */
    'user_contacts'?: Array<FriendshipsTargetUserContacts>;
}
/**
 * 
 * @export
 * @interface UpdateContactsContactAttributes
 */
export interface UpdateContactsContactAttributes {
    /**
     * 
     * @type {string}
     * @memberof UpdateContactsContactAttributes
     */
    'phone_number'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContactsContactAttributes
     */
    'username'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateContactsContactAttributes
     */
    'address'?: string | null;
}
/**
 * 
 * @export
 * @interface UpdateContactsUserContactsAttributes
 */
export interface UpdateContactsUserContactsAttributes {
    /**
     * User Contact ID
     * @type {number}
     * @memberof UpdateContactsUserContactsAttributes
     */
    'id'?: number | null;
    /**
     * Contact Type
     * @type {string}
     * @memberof UpdateContactsUserContactsAttributes
     */
    'contact_type'?: string;
    /**
     * Delete?
     * @type {boolean}
     * @memberof UpdateContactsUserContactsAttributes
     */
    '_destroy'?: boolean | null;
    /**
     * 
     * @type {UpdateContactsContactAttributes}
     * @memberof UpdateContactsUserContactsAttributes
     */
    'contact_attributes'?: UpdateContactsContactAttributes;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary List friendship
         * @param {string} [tag] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsGet: async (tag?: string, name?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/friendships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)

            if (tag !== undefined) {
                localVarQueryParameter['tag'] = tag;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete friendship
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsIdDelete: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('friendshipsIdDelete', 'id', id)
            const localVarPath = `/friendships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show friendship
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsIdGet: async (id: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('friendshipsIdGet', 'id', id)
            const localVarPath = `/friendships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update friendship
         * @param {number} id 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsIdPut: async (id: number, inlineObject2?: InlineObject2, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('friendshipsIdPut', 'id', id)
            const localVarPath = `/friendships/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject2, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create friendship
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsPost: async (inlineObject1?: InlineObject1, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/friendships`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDelete: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Show current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update user
         * @param {string} [name] User Name
         * @param {any} [avatarAttributesFile] Avatar File
         * @param {boolean} [avatarAttributesPurge] Purge Avatar?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePut: async (name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (avatarAttributesFile !== undefined) { 
                localVarFormParams.append('_avatar_attributes[file]', new Blob([JSON.stringify(avatarAttributesFile)], { type: "application/json", }));
            }
    
            if (avatarAttributesPurge !== undefined) { 
                localVarFormParams.append('_avatar_attributes[purge]', avatarAttributesPurge as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign_in`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Sign up
         * @param {string} [name] User Name
         * @param {any} [avatarAttributesFile] Avatar File
         * @param {boolean} [avatarAttributesPurge] Purge Avatar?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpPost: async (name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sign_up`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('name', name as any);
            }
    
            if (avatarAttributesFile !== undefined) { 
                localVarFormParams.append('_avatar_attributes[file]', new Blob([JSON.stringify(avatarAttributesFile)], { type: "application/json", }));
            }
    
            if (avatarAttributesPurge !== undefined) { 
                localVarFormParams.append('_avatar_attributes[purge]', avatarAttributesPurge as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update Contacts
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContactsPut: async (inlineObject?: InlineObject, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/update_contacts`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Bearer required
            await setApiKeyToObject(localVarHeaderParameter, "Authorization", configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(inlineObject, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary List friendship
         * @param {string} [tag] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friendshipsGet(tag?: string, name?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InlineResponse200>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friendshipsGet(tag, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete friendship
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friendshipsIdDelete(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friendshipsIdDelete(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show friendship
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friendshipsIdGet(id: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friendshipsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update friendship
         * @param {number} id 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friendshipsIdPut(id: number, inlineObject2?: InlineObject2, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse200>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friendshipsIdPut(id, inlineObject2, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Create friendship
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async friendshipsPost(inlineObject1?: InlineObject1, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.friendshipsPost(inlineObject1, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meDelete(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meDelete(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Show current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update user
         * @param {string} [name] User Name
         * @param {any} [avatarAttributesFile] Avatar File
         * @param {boolean} [avatarAttributesPurge] Purge Avatar?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async mePut(name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.mePut(name, avatarAttributesFile, avatarAttributesPurge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signInPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signInPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Sign up
         * @param {string} [name] User Name
         * @param {any} [avatarAttributesFile] Avatar File
         * @param {boolean} [avatarAttributesPurge] Purge Avatar?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async signUpPost(name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InlineResponse201>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.signUpPost(name, avatarAttributesFile, avatarAttributesPurge, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Update Contacts
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateContactsPut(inlineObject?: InlineObject, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateContactsPut(inlineObject, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary List friendship
         * @param {string} [tag] 
         * @param {string} [name] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsGet(tag?: string, name?: string, options?: any): AxiosPromise<Array<InlineResponse200>> {
            return localVarFp.friendshipsGet(tag, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete friendship
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsIdDelete(id: number, options?: any): AxiosPromise<void> {
            return localVarFp.friendshipsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show friendship
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsIdGet(id: number, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.friendshipsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update friendship
         * @param {number} id 
         * @param {InlineObject2} [inlineObject2] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsIdPut(id: number, inlineObject2?: InlineObject2, options?: any): AxiosPromise<InlineResponse200> {
            return localVarFp.friendshipsIdPut(id, inlineObject2, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create friendship
         * @param {InlineObject1} [inlineObject1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        friendshipsPost(inlineObject1?: InlineObject1, options?: any): AxiosPromise<void> {
            return localVarFp.friendshipsPost(inlineObject1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meDelete(options?: any): AxiosPromise<void> {
            return localVarFp.meDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Show current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.meGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update user
         * @param {string} [name] User Name
         * @param {any} [avatarAttributesFile] Avatar File
         * @param {boolean} [avatarAttributesPurge] Purge Avatar?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        mePut(name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.mePut(name, avatarAttributesFile, avatarAttributesPurge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign in
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signInPost(options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.signInPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Sign up
         * @param {string} [name] User Name
         * @param {any} [avatarAttributesFile] Avatar File
         * @param {boolean} [avatarAttributesPurge] Purge Avatar?
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signUpPost(name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options?: any): AxiosPromise<InlineResponse201> {
            return localVarFp.signUpPost(name, avatarAttributesFile, avatarAttributesPurge, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update Contacts
         * @param {InlineObject} [inlineObject] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateContactsPut(inlineObject?: InlineObject, options?: any): AxiosPromise<void> {
            return localVarFp.updateContactsPut(inlineObject, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary List friendship
     * @param {string} [tag] 
     * @param {string} [name] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public friendshipsGet(tag?: string, name?: string, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).friendshipsGet(tag, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete friendship
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public friendshipsIdDelete(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).friendshipsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show friendship
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public friendshipsIdGet(id: number, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).friendshipsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update friendship
     * @param {number} id 
     * @param {InlineObject2} [inlineObject2] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public friendshipsIdPut(id: number, inlineObject2?: InlineObject2, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).friendshipsIdPut(id, inlineObject2, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create friendship
     * @param {InlineObject1} [inlineObject1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public friendshipsPost(inlineObject1?: InlineObject1, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).friendshipsPost(inlineObject1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meDelete(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).meDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Show current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public meGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).meGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update user
     * @param {string} [name] User Name
     * @param {any} [avatarAttributesFile] Avatar File
     * @param {boolean} [avatarAttributesPurge] Purge Avatar?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public mePut(name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).mePut(name, avatarAttributesFile, avatarAttributesPurge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign in
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signInPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signInPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Sign up
     * @param {string} [name] User Name
     * @param {any} [avatarAttributesFile] Avatar File
     * @param {boolean} [avatarAttributesPurge] Purge Avatar?
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signUpPost(name?: string, avatarAttributesFile?: any, avatarAttributesPurge?: boolean, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).signUpPost(name, avatarAttributesFile, avatarAttributesPurge, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update Contacts
     * @param {InlineObject} [inlineObject] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateContactsPut(inlineObject?: InlineObject, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).updateContactsPut(inlineObject, options).then((request) => request(this.axios, this.basePath));
    }
}


